name: Deploy Hello-Go to EC2 (with auto ECR creation)

on:
  push:
    branches: [ "master" ]

jobs:
  create-and-deploy:
    runs-on: ubuntu-latest
    
    # Environment variables shared by all steps in this job.
    env:
      APP_NAME: hello-go
      IMAGE_TAG: latest

    steps:
      # 1. Check out code
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 3. Create ECR repository if not exists
      - name: Create ECR repository if not exists
        run: |
          echo "Checking if '$APP_NAME' exists in ECR..."
          if ! aws ecr describe-repositories --repository-names "$APP_NAME" >/dev/null 2>&1; then
            echo "Repository '$APP_NAME' not found. Creating now..."
            aws ecr create-repository --repository-name "$APP_NAME"
            echo "Repository '$APP_NAME' created."
          else
            echo "Repository '$APP_NAME' already exists."
          fi

      # 4. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} \
            | docker login --username AWS --password-stdin \
            $AWS_ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      # 5. Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          
          docker build -t $APP_NAME:$IMAGE_TAG .
          docker tag $APP_NAME:$IMAGE_TAG $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG

      # 6. Update DNS Record in Route 53
      - name: Add DNS Record
        run: |
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ secrets.ROUTE53_ZONE_ID }} \
            --change-batch file://<(cat << EOF
            {
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "$APP_NAME.example.com",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [{ "Value": "${{ secrets.EC2_IP }}" }]
                }
              }]
            }
            EOF
            )

      # 7. Install SSH Key
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      # 8. Deploy Application on EC2
      - name: Deploy Application
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          SUBDOMAIN="$APP_NAME.example.com"
          PORT=8080

          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            docker pull $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG

            docker stop $APP_NAME || true
            docker rm $APP_NAME || true

            docker run -d --name $APP_NAME -p 8080:8080 $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG

            echo "server {
                listen 80;
                server_name $SUBDOMAIN;

                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
            }" > /etc/nginx/sites-available/$APP_NAME.conf

            ln -sf /etc/nginx/sites-available/$APP_NAME.conf /etc/nginx/sites-enabled/
            nginx -t && systemctl reload nginx

            if ! [ -x "$(command -v certbot)" ]; then
              apt-get update
              apt-get install -y certbot python3-certbot-nginx
            fi
            certbot --nginx -d $SUBDOMAIN --non-interactive --agree-tos -m ${{ secrets.CERTBOT_EMAIL }}
          EOF
